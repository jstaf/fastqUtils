#!/usr/bin/env python3

import sys
import argparse

from fqutils.fastq import Fastq
import fqutils.util as util

def main():
    parser = argparse.ArgumentParser(
            description='Re-pair reads from discordant FASTQ files (for instance, after filtering reads by quality).')
    parser.add_argument('-v', '--version', action='version', version='fq-repair version 1.0')
    parser.add_argument('-u', '--keep-unique', default=False, const=True, action='store_const',
            help='Keep reads without a corresponding match. Unique reads are output to a separate file (filename_unique.fastq).')
    parser.add_argument('-1', '--output1', nargs=1, type=str,
            help='Output for first FASTQ file after re-pairing (defaults to "filename_common.fastq"). May be gzipped.')
    parser.add_argument('-2', '--output2', nargs=1, type=str,
            help='Output for second FASTQ file after re-pairing (defaults to "filename_common.fastq"). May be gzipped.')
    parser.add_argument('fastq1', nargs=1, type=str,
            help='First FASTQ file to be re-paired.')
    parser.add_argument('fastq2', nargs=1, type=str,
            help='Second FASTQ file to be re-paired.')
    argv = parser.parse_args()

    fq1 = argv.fastq1[0]
    fq2 = argv.fastq2[0]

    if not util.is_gzip(fq1) and not util.is_gzip(fq2):
        pair_reads(fq1, fq2, keep_unique=argv.keep_unique)
    else:
        sys.exit('gzip currently not supported')


def index(filename):
    """Create a dictionary of readids and their seek positions."""
    
    idx = {}
    with Fastq(filename) as fq:
        while True:
            read = fq.get_read()
            if read is None:
                break
            else:
                idx[read[0]] = fq.pos
    return idx


def pair_reads(fastq1, fastq2, keep_unique=False):
    idx = index(fastq2)

    # input file handles
    fastq1_orig = Fastq(fastq1)
    fastq2_orig = Fastq(fastq2)

    # output file handles
    fastq1_common = Fastq(util.prefix_extension(fastq1, '_common'), 'w')
    fastq2_common = Fastq(util.prefix_extension(fastq2, '_common'), 'w')
    if keep_unique:
        fastq1_unique = Fastq(util.prefix_extension(fastq1, '_unique'), 'w')

    while True:
        read1 = fastq1_orig.get_read()
        if read1 is None:
            break
        readid = read1[0]
        if readid in idx.keys():
            # write both reads out to common files, remove key from index
            fastq1_common.writelines(read1)
            fastq2_orig.seek(idx.pop(readid))
            read2 = fastq2_orig.get_read()
            fastq2_common.writelines(read2)
        elif keep_unique:
            # write out to unique file for fastq1
            fastq1_unique.writelines(read1)
    # close file handles
    fastq1_common.close()
    fastq2_common.close()
    if keep_unique:
        fastq1_unique.close()

    if keep_unique:
        # all remaining keys in dictionary are the unique reads for fastq2
        with Fastq(util.prefix_extension(fastq2, '_unique'), 'w') as fastq2_unique:
            for remaining in idx:
                fastq2_orig.seek(idx[remaining])
                read = fastq2_orig.get_read()
                fastq2_unique.writelines(read)
        fastq1_orig.close()
        fastq2_orig.close()

if __name__ == '__main__':
    main()
